// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Get environment variables
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || '';
const SUPABASE_ANON_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || '';

// Create a custom fetch implementation that blocks WebSockets and handles auth
const customFetch = async (url: string, options: RequestInit = {}) => {
  const requestUrl = url.toString();
  
  // Block all WebSocket connections
  if (options.headers && (options.headers as any)['Upgrade'] === 'websocket') {
    console.log('[Supabase] Blocking WebSocket connection to:', requestUrl);
    return new Response(null, { status: 200 });
  }
  
  // Add headers for Supabase auth
  const headers = new Headers(options.headers);
  if (!headers.has('Content-Type')) {
    headers.set('Content-Type', 'application/json');
  }
  headers.set('apikey', SUPABASE_ANON_KEY);
  
  // Make the request with updated headers
  const response = await fetch(requestUrl, {
    ...options,
    headers,
  });
  
  return response;
};

// Create the Supabase client with realtime completely disabled
const supabaseOptions = {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false,
    storageKey: 'sb-auth-token',
  },
  // Disable realtime features
  realtime: {
    // @ts-ignore - This disables realtime
    disable: true,
    params: {
      eventsPerSecond: 0,
    },
  },
  // @ts-ignore - Disable realtime at a lower level
  _realtime: null,
  global: {
    // @ts-ignore - Use our custom fetch
    fetch: customFetch,
  },
};

export const supabase = createClient<Database>(
  SUPABASE_URL,
  SUPABASE_ANON_KEY,
  supabaseOptions
);